services:
  # ==========
  # PostgreSQL Database
  # ==========
  postgres:
    image: postgres:15
    container_name: chu-postgres-db
    environment:
      POSTGRES_DB: healthcare_data
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../datas/DATA2023:/data/DATA2023:ro
    networks:
      - spark-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-web
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - spark-network

  # ==========
  # MinIO Object Storage as Data Lake
  # ==========
  minio:
    image: minio/minio:latest
    container_name: minio-storage
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - spark-network

  # ==========
  # Spark job runner
  # ==========
  spark-job:
    container_name: spark-job-runner
    build:
      context: ..
      dockerfile: docker/spark/Dockerfile
    depends_on:
      spark-master:
        condition: service_healthy
      minio:
        condition: service_healthy
      spark-worker:
        condition: service_started
    environment:
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - SPARK_MASTER_URL=spark://spark-master:7077
      - JOB_DIR=/opt/app/spark/jobs
      - STARTUP_SLEEP=10
    volumes:
      - ../datas:/opt/app/datas:ro # Montage des donn√©es en lecture seule
      - ../spark:/opt/app/spark:ro # Monte seulement le r√©pertoire spark (contient jobs/)
      - ./spark/jars:/opt/jars:ro # jars delta / hadoop-aws (optionnel)
    networks:
      - spark-network
    restart: "on-failure"

  # ==========
  # Spark Cluster and Thrift Server for Delta Lake Access
  # ==========
  spark-master:
    build:
      context: ..
      dockerfile: docker/spark/Dockerfile.base
    container_name: spark-master-node
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master
    environment:
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ../conf/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf:ro
      - ../spark:/opt/app/spark:ro # Monte seulement le r√©pertoire spark (contient jobs/)
      - ../datas:/opt/app/datas:ro # Montage des donn√©es en lecture seule
    depends_on:
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - spark-network

  spark-worker:
    build:
      context: ..
      dockerfile: docker/spark/Dockerfile.base
    container_name: spark-worker-node
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    environment:
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2g
    volumes:
      - ../spark:/opt/app/spark:ro # Monte seulement le r√©pertoire spark (contient jobs/)
      - ../datas:/opt/app/datas:ro # Montage des donn√©es en lecture seule
    depends_on:
      - spark-master
    networks:
      - spark-network

  spark-thrift:
    build:
      context: ..
      dockerfile: docker/spark/Dockerfile.base
    container_name: spark-thrift-server
    user: root
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        sleep 30
        mkdir -p /tmp/spark-warehouse
          
        # Attendre que les tables soient cr√©√©es dans MinIO
        echo "‚è≥ Attente de la cr√©ation des tables..."
        sleep 60
          
        # Ex√©cuter le script d'enregistrement des tables avec spark-submit
        echo "üîó Enregistrement des tables Delta dans le metastore..."
        /opt/spark/bin/spark-submit \
          --master spark://spark-master:7077 \
          --packages io.delta:delta-core_2.12:2.4.0,org.apache.hadoop:hadoop-aws:3.3.4,com.amazonaws:aws-java-sdk-bundle:1.12.262 \
          --conf spark.sql.extensions=io.delta.sql.DeltaSparkSessionExtension \
          --conf spark.sql.catalog.spark_catalog=org.apache.spark.sql.delta.catalog.DeltaCatalog \
          --conf spark.hadoop.fs.s3a.endpoint=http://minio:9000 \
          --conf spark.hadoop.fs.s3a.access.key=minioadmin \
          --conf spark.hadoop.fs.s3a.secret.key=minioadmin123 \
          --conf spark.hadoop.fs.s3a.path.style.access=true \
          --conf spark.hadoop.fs.s3a.impl=org.apache.hadoop.fs.s3a.S3AFileSystem \
          --conf spark.hadoop.fs.s3a.connection.ssl.enabled=false \
          --conf spark.hadoop.fs.s3a.aws.credentials.provider=org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider \
          /opt/app/spark/jobs/04_register_table_hive.py
        
        # D√©marrer le Thrift Server
        echo "üöÄ D√©marrage du Thrift Server..."
        /opt/spark/bin/spark-submit \
          --class org.apache.spark.sql.hive.thriftserver.HiveThriftServer2 \
          --master spark://spark-master:7077 \
          --packages io.delta:delta-core_2.12:2.4.0,org.apache.hadoop:hadoop-aws:3.3.4,com.amazonaws:aws-java-sdk-bundle:1.12.262 \
          --conf spark.sql.hive.thriftServer.singleSession=true \
          --conf spark.serializer=org.apache.spark.serializer.KryoSerializer \
          --conf spark.sql.warehouse.dir=s3a://healthcare-data/ \
          --conf spark.local.dir=/tmp \
          --conf spark.sql.extensions=io.delta.sql.DeltaSparkSessionExtension \
          --conf spark.sql.catalog.spark_catalog=org.apache.spark.sql.delta.catalog.DeltaCatalog \
          --conf spark.hadoop.fs.s3a.endpoint=http://minio:9000 \
          --conf spark.hadoop.fs.s3a.access.key=minioadmin \
          --conf spark.hadoop.fs.s3a.secret.key=minioadmin123 \
          --conf spark.hadoop.fs.s3a.path.style.access=true \
          --conf spark.hadoop.fs.s3a.impl=org.apache.hadoop.fs.s3a.S3AFileSystem \
          --conf spark.hadoop.fs.s3a.connection.ssl.enabled=false \
          --conf spark.hadoop.fs.s3a.aws.credentials.provider=org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider \
          --hiveconf hive.server2.thrift.port=10000 \
          --hiveconf hive.server2.thrift.bind.host=0.0.0.0
    ports:
      - "10000:10000"
    volumes:
      - ../spark:/opt/app/spark:ro # Monte seulement le r√©pertoire spark (contient jobs/)
      - ../conf/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf:ro
    environment:
      REGISTER_TABLES_SCRIPT: /opt/scripts/register_tables.py              # chemin du script
    depends_on:
      - spark-master
      - spark-worker
      - minio
      # - spark-job
    networks:
      - spark-network
    restart: unless-stopped
    tmpfs:
      - /tmp

  # ==========
  # Apache Superset for Data Visualization
  # ==========
  superset:
    build:
      context: ..
      dockerfile: docker/superset/Dockerfile
    container_name: superset
    depends_on:
      - spark-thrift # Attend que Spark soit pr√™t
    ports:
      - "8088:8088" # Port par d√©faut de Superset
    environment:
      - SUPERSET_SECRET_KEY=3YLpq3ON/qk1iPLKRlU88FQSy1SDXCRGGS9FYYiR9cr0jcvaphgPQxcQ
      - SUPERSET_CONFIG_PATH=/app/superset_config.py
    networks:
      - spark-network
    volumes:
      - superset_data:/app/superset_home # Stocke les dashboards
      - ../conf/superset_config.py:/app/superset_config.py:ro

networks:
  spark-network:
    driver: bridge

volumes:
  minio-data:
  metabase-data:
  postgres-data:
  pgadmin-data:
  superset_data:
