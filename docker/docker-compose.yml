services:
  # ==========
  # PostgreSQL Database (pour les donn√©es healthcare ET le metastore Hive)
  # ==========
  postgres:
    image: postgres:13
    container_name: chu-postgres-db
    environment:
      POSTGRES_DB: healthcare_data
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../datas/DATA2023:/data/DATA2023:ro
      - ../conf/scripts/init-postgresql.sql:/docker-entrypoint-initdb.d/init-postgresql.sql:ro  
    networks:  
      - spark-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-web
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - spark-network

  # ==========
  # Hive Metastore Service
  # ==========
  hive-metastore:
    build:
      context: ..
      dockerfile: docker/hive/Dockerfile
    container_name: hive-metastore
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=metastore
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
    ports:
      - "9083:9083"
    depends_on:
      - postgres
    volumes:
      - ../conf/hive-site.xml:/opt/hive/conf/hive-site.xml:ro
    networks:
      - spark-network
    restart: unless-stopped

  # ==========
  # MinIO Object Storage as Data Lake
  # ==========
  minio:
    image: minio/minio:latest
    container_name: minio-storage
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - spark-network

  trino:
    environment:
      - TRINO_HADOOP_CONF_DIR=/etc/trino/hadoop
    image: trinodb/trino:latest
    container_name: trino
    ports:
      - "8081:8080"
    volumes:
      - ./trino/config:/etc/trino:ro
      - ./trino/config/hadoop:/etc/trino/hadoop:ro
    depends_on:
      - hive-metastore
      - minio
    networks:
      - spark-network

  # ==========
  # Spark job runner
  # ==========
  spark-job:
    container_name: spark-job-runner
    build:
      context: ..
      dockerfile: docker/spark/Dockerfile
    depends_on:
      spark-master:
        condition: service_healthy
      minio:
        condition: service_healthy
      spark-worker:
        condition: service_started
      hive-metastore:
        condition: service_started
    environment:
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - SPARK_MASTER_URL=spark://spark-master:7077
      - JOB_DIR=/opt/app/spark/jobs
      - STARTUP_SLEEP=15
    volumes:
      - ../datas:/opt/app/datas:ro
      - ../spark:/opt/app/spark:ro
      - ../conf/hive-site.xml:/opt/spark/conf/hive-site.xml:ro
      - ../conf/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf:ro
      - ../spark/jobs/run_jobs.sh:/opt/app/run_jobs.sh:ro
    entrypoint: ["/bin/bash", "/opt/app/run_jobs.sh"]
    networks:
      - spark-network
    restart: "on-failure"

  # ==========
  # Spark Cluster
  # ==========
  spark-master:
    build:
      context: ..
      dockerfile: docker/spark/Dockerfile.base
    container_name: spark-master-node
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master
    environment:
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ../conf/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf:ro
      - ../conf/hive-site.xml:/opt/spark/conf/hive-site.xml:ro
      - ../spark:/opt/app/spark:ro
      - ../datas:/opt/app/datas:ro
    depends_on:
      - minio
      - hive-metastore
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - spark-network

  spark-worker:
    build:
      context: ..
      dockerfile: docker/spark/Dockerfile.base
    container_name: spark-worker-node
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    environment:
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2g
    volumes:
      - ../conf/hive-site.xml:/opt/spark/conf/hive-site.xml:ro
      - ../conf/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf:ro
      - ../spark:/opt/app/spark:ro
      - ../datas:/opt/app/datas:ro
    depends_on:
      - spark-master
      - hive-metastore
    networks:
      - spark-network

  # ==========
  # Trino Query Engine (remplace Spark Thrift Server)
  # ==========
  trino:
    image: trinodb/trino:latest
    container_name: trino-coordinator
    ports:
      - "8090:8080"
    volumes:
      - ../conf/trino/node.properties:/etc/trino/node.properties:ro
      - ../conf/trino/config.properties:/etc/trino/config.properties:ro
      - ../conf/trino/jvm.config:/etc/trino/jvm.config:ro
      - ../conf/trino/core-site.xml:/etc/trino/core-site.xml:ro
      - ../conf/trino/catalog/hive.properties:/etc/trino/catalog/hive.properties:ro
      - ../conf/trino/catalog/delta.properties:/etc/trino/catalog/delta.properties:ro
      - trino-data:/data/trino
    depends_on:
      hive-metastore:
        condition: service_started
      minio:
        condition: service_healthy
    networks:
      - spark-network
    environment:
      - TRINO_ENVIRONMENT=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/info"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ==========
  # Apache Superset for Data Visualization
  # ==========
  superset:
    build:
      context: ..
      dockerfile: docker/superset/Dockerfile
    container_name: superset
    depends_on:
      - trino
    ports:
      - "8088:8088"
    environment:
      - SUPERSET_SECRET_KEY=3YLpq3ON/qk1iPLKRlU88FQSy1SDXCRGGS9FYYiR9cr0jcvaphgPQxcQ
      - SUPERSET_CONFIG_PATH=/app/superset_config.py
    networks:
      - spark-network
    volumes:
      - superset_data:/app/superset_home
      - ../conf/superset_config.py:/app/superset_config.py

networks:
  spark-network:
    driver: bridge

volumes:
  minio-data:
  metabase-data:
  postgres-data:
  pgadmin-data:
  superset_data:
  trino-data: